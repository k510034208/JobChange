"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.test = void 0;
const fs = require("fs");
const detect_1 = require("../../../../lib/detect");
const iac_parser_1 = require("../../../../lib/iac/iac-parser");
const util = require("util");
const policy_engine_1 = require("./policy-engine");
const results_formatter_1 = require("./results-formatter");
const parsers_1 = require("./parsers");
const local_cache_1 = require("./local-cache");
const readFileContentsAsync = util.promisify(fs.readFile);
// this method executes the local processing engine and then formats the results to adapt with the CLI output.
// the current version is dependent on files to be present locally which are not part of the source code.
// without these files this method would fail.
// if you're interested in trying out the experimental local execution model for IaC scanning, please reach-out.
async function test(pathToScan, options) {
    if (!local_cache_1.isLocalCacheExists())
        throw Error(`Missing IaC local cache data, please validate you have: \n${local_cache_1.REQUIRED_LOCAL_CACHE_FILES.join('\n')}`);
    // TODO: add support for proper typing of old TestResult interface.
    const results = await localProcessing(pathToScan);
    const formattedResults = results_formatter_1.formatResults(results, options);
    const singleFileFormattedResult = formattedResults[0];
    return singleFileFormattedResult;
}
exports.test = test;
async function localProcessing(pathToScan) {
    const filePathsToScan = await getFilePathsToScan(pathToScan);
    const fileDataToScan = await parseFilesForScan(filePathsToScan);
    const scanResults = await scanFilesForIssues(fileDataToScan);
    return scanResults;
}
async function getFilePathsToScan(pathToScan) {
    if (detect_1.isLocalFolder(pathToScan)) {
        throw new Error('IaC Experimental version does not support directory scan yet.');
    }
    return [
        { filePath: pathToScan, fileType: iac_parser_1.getFileType(pathToScan) },
    ];
}
async function parseFilesForScan(filesMetadata) {
    const parsedFileData = [];
    for (const fileMetadata of filesMetadata) {
        const fileContent = await readFileContentsAsync(fileMetadata.filePath, 'utf-8');
        const parsedFiles = parsers_1.tryParseIacFile(fileMetadata, fileContent);
        parsedFileData.push(...parsedFiles);
    }
    return parsedFileData;
}
async function scanFilesForIssues(parsedFiles) {
    // TODO: when adding dir support move implementation to queue.
    // TODO: when adding dir support gracefully handle failed scans
    return Promise.all(parsedFiles.map(async (file) => {
        const policyEngine = await policy_engine_1.getPolicyEngine(file.engineType);
        const scanResults = policyEngine.scanFile(file);
        return scanResults;
    }));
}
//# sourceMappingURL=index.js.map