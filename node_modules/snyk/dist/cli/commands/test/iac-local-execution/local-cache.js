"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLocalCachePath = exports.isLocalCacheExists = exports.REQUIRED_LOCAL_CACHE_FILES = exports.LOCAL_POLICY_ENGINE_DIR = void 0;
const path = require("path");
const fs = require("fs");
const types_1 = require("./types");
exports.LOCAL_POLICY_ENGINE_DIR = `.iac-data`;
const KUBERNETES_POLICY_ENGINE_WASM_PATH = path.join(exports.LOCAL_POLICY_ENGINE_DIR, 'k8s_policy.wasm');
const KUBERNETES_POLICY_ENGINE_DATA_PATH = path.join(exports.LOCAL_POLICY_ENGINE_DIR, 'k8s_data.json');
const TERRAFORM_POLICY_ENGINE_WASM_PATH = path.join(exports.LOCAL_POLICY_ENGINE_DIR, 'tf_policy.wasm');
const TERRAFORM_POLICY_ENGINE_DATA_PATH = path.join(exports.LOCAL_POLICY_ENGINE_DIR, 'tf_data.json');
exports.REQUIRED_LOCAL_CACHE_FILES = [
    KUBERNETES_POLICY_ENGINE_WASM_PATH,
    KUBERNETES_POLICY_ENGINE_DATA_PATH,
    TERRAFORM_POLICY_ENGINE_WASM_PATH,
    TERRAFORM_POLICY_ENGINE_DATA_PATH,
];
function isLocalCacheExists() {
    return exports.REQUIRED_LOCAL_CACHE_FILES.every(fs.existsSync);
}
exports.isLocalCacheExists = isLocalCacheExists;
function getLocalCachePath(engineType) {
    switch (engineType) {
        case types_1.EngineType.Kubernetes:
            return [
                `${process.cwd()}/${KUBERNETES_POLICY_ENGINE_WASM_PATH}`,
                `${process.cwd()}/${KUBERNETES_POLICY_ENGINE_DATA_PATH}`,
            ];
        case types_1.EngineType.Terraform:
            return [
                `${process.cwd()}/${TERRAFORM_POLICY_ENGINE_WASM_PATH}`,
                `${process.cwd()}/${TERRAFORM_POLICY_ENGINE_DATA_PATH}`,
            ];
    }
}
exports.getLocalCachePath = getLocalCachePath;
//# sourceMappingURL=local-cache.js.map