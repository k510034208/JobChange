<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, shrink-to-fit=no">
  <title>JobChange</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
  <link rel="stylesheet" href="/stylesheets/bootstrap.min.css">
  <link rel="stylesheet" href="/stylesheets/styles.min.css">
  </head>

<body>
  <header>
    <%- include('./common/header') %>    
  </header>

  <div id="app">
    <div class="container" style="padding: 10px 0px;padding-top: 30px;">
      <h6>
        <a href="/top">Topへ戻る</a>
      </h6>  
    </div>

    <div class="container" style="padding: 10px 0px;padding-top: 30px;">
      <div class="error">{{ validation.c_name }}</div>
      <h2>
        <input type="text" v-model:value="c_name">
        <button type="button" class="btn btn-primary" @click='updateContent("c_name")' style="margin-left: 10px;">更新</button>
      </h2>
      <h6>(<a v-bind:href="url" target="_blank" rel="noopener noreferrer">HP</a>)</h6>
    </div>

    <div class="container" style="padding: 10px 0px;padding-top: 0px;">
      <div class="error">{{ validation.url }}</div>
      <input type="text" v-model:value="url">
        <button type="button" class="btn btn-primary" @click='updateContent("url")' style="margin-left: 10px;">更新</button>
    </div>

    <div class="container" style="padding: 10px 0px;padding-top: 20px;">
      <div class="error">{{ validation.application_requirement }}</div>
      <h4>募集内容
        <button type="button" class="btn btn-primary" @click='updateContent("application_requirement")' style="margin-left: 10px;">更新</button>
      </h4>
      <div style="padding: 0px 10px;">
        <textarea rows="10" v-model:value="application_requirement" style="width: 90%;"></textarea>
      </div>
    </div>

    <div class="container" style="padding: 10px 0px;padding-top: 15px;">
      <div class="error">{{ validation.analysis_memo }}</div>
      <h4>
        分析メモ 
        <button type="button" class="btn btn-primary" @click='updateContent("analysis_memo")' style="margin-left: 10px;">更新</button>
      </h4>
      <div style="padding: 10px 10px;">
        <textarea rows="10" v-model:value="analysis_memo" style="width: 90%;"></textarea>
      </div>
    </div>

    <div class="container" style="padding: 10px 0px;padding-top: 15px;">
      <div class="error">{{ validation.selection_status }}</div>
      <h6>選考状況：
        <select v-model:value="selection_status">
          <option value="00: ご縁なし（書類）">00: ご縁なし（書類）</option>
          <option value="01:ご縁なし（面接）">01:ご縁なし（面接）</option>
          <option value="10:書類提出済み">10:書類提出済み</option>
          <option value="11:書類通過">11:書類通過</option>
          <option value="20:面接（1次）通過">20:面接（1次）通過</option>
          <option value="30:面接（2次）通過">30:面接（2次）通過</option>
          <option value="40:面接（3次~）通過">40:面接（3次~）通過</option>
          <option value="50:面接（内定）">50:面接（内定）</option>
        </select>
        <button type="button" class="btn btn-primary" @click='updateContent("selection_status")' style="margin-left: 10px;">更新</button>
      </h6>
    </div>

    <div class="container" style="padding: 10px 0px;padding-top: 15px;">
      <div class="error">{{ validation.selection_next_date }}</div>
      <h6>次回選考日（期日）：
        <input type="date" v-model:value="selection_next_date">
        <button type="button" class="btn btn-primary" @click='updateContent("selection_next_date")'
          style="margin-left: 10px;">更新</button>
      </h6>
    </div>

    <div class="container" style="padding: 10px 0px;padding-top: 15px;">
      <div class="error">{{ validation.selection_next_content }}</div>
      <h6>次回選考内容：
        <input type="text" v-model:value="selection_next_content">
        <button type="button" class="btn btn-primary" @click='updateContent("selection_next_content")'
          style="margin-left: 10px;">更新</button>
      </h6>
    </div>

    <div class="container" style="padding: 10px 0px;padding-top: 15px;">
      <div class="error">{{ validation.selection_memo }}</div>
      <h4>
        選考メモ
        <button type="button" class="btn btn-primary" @click='updateContent("selection_memo")' style="margin-left: 10px;">更新</button>
      </h4>
      <div style="padding: 10px 10px;">
        <textarea rows="10" style="width: 90%;" v-model:value="selection_memo"></textarea>
      </div>
    </div>
  </div>

  <script src="../javascripts/jquery.min.js"></script>
  <script src="../javascripts/bootstrap.bundle.min.js"></script>
  <script src="../javascripts/script.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/vue@2.6.12/dist/vue.js"></script>

  <script>
    var app = new Vue({
      el: '#app',
      data: {
        id : `<%= comp.id %>`,
        c_name: `<%= comp.c_name %>`,
        url: `<%= comp.url %>`,
        application_requirement: `<%- comp.application_requirement %>`,
        analysis_memo: `<%- comp.analysis_memo %>`,
        selection_status: `<%= comp.selection_status %>`,
        selection_next_date: `<%= comp.selection_next_date %>`,
        selection_next_content: `<%= comp.selection_next_content %>`,
        selection_memo: `<%= comp.selection_memo %>`,
        validation:{
          c_name:'',
          url:'',
          application_requirement:'',
          analysis_memo:'',
          selection_status:'',
          selection_next_date:'',
          selection_next_content:'',
          selection_memo:''
        }
      },
      methods: {
        updateContent: function (item) {

          console.log(`compid : ${ this.id }`);
          console.log(`update : ${ item }`);

          comp_id = this.id ;
          var content;

          // 更新内容の取得
          if(item == 'c_name'){
            content = this.c_name;

            // サニタイジング対象文字列のチェック
            if(!checkSanityzeWord(content)){
              this.validation.c_name = '半角「＜」「＞」「＆」「‘」は使えません'
              throw 'c_name contain sanityze word';
            }

            // NULLチェック
            if(!checkNull(content)){
              this.validation.c_name = '企業名を入力してください';
              throw 'c_name null';
            };

            // 文字長チェック
            if(!checkLength(content,100)){
              this.validation.c_name = '企業名は100文字以内で入力してください'
              throw 'c_name length over';
            }

          } else if(item == 'url'){
            content = this.url;

            // サニタイジング対象文字列のチェック
            if (!checkSanityzeWord(content)) {
              this.validation.c_name = '半角「＜」「＞」「＆」「‘」は使えません'
              throw 'url contain sanityze word';
            }

            // URLの形式チェック
            if(!checkUrlFormat(content)){
              
              this.validation.url = '「http://」または「https://」の形式で入力してください ';
              throw 'url format error';
            }

            // 文字長チェック
            if (!checkLength(content, 255)) {
              this.validation.c_name = 'URLは255文字以内で入力してください'
              throw 'url length over';
            }

          } else if (item == 'application_requirement') {
            content = this.application_requirement;

            // サニタイジング対象文字列のチェック
            if (!checkSanityzeWord(content)) {
              this.validation.application_requirement = '半角「＜」「＞」「＆」「‘」は使えません'
              throw 'application_requirement contain sanityze word';
            }

            // 文字長チェック
            if (!checkLength(content, 10000)) {
              this.validation.application_requirement = '10,000文字以内で入力してください'
              throw 'application_requirement length over';
            }            

          } else if (item == 'analysis_memo') {
            content = this.analysis_memo;

            // サニタイジング対象文字列のチェック
            if (!checkSanityzeWord(content)) {
              this.validation.analysis_memo = '半角「＜」「＞」「＆」「‘」は使えません'
              throw 'analysis_memo contain sanityze word';
            }

            // 文字長チェック
            if (!checkLength(content, 10000)) {
              this.validation.analysis_memo = '10,000文字以内で入力してください'
              throw 'analysis_memo length over';
            }
            
          } else if (item == 'selection_status') {
            content = this.selection_status

            console.log(content);

            // フォーマットチェック
            if(!checkSelectionStatus(content)){
              this.validation.selection_status = 'プルダウンから選択してください。'
              throw 'selection_status format error';
            }

          } else if (item == 'selection_next_date') {
            content = this.selection_next_date
            console.log(content);
            
            // 日付のフォーマットチェック
            if(!checkDateFormat(content)){

              // NULLは許容する
              if(checkNull(content)){
                this.validation.selection_next_date = 'yyyy-mm-dd の形式で入力してください'
                throw 'selection_next_content contain sanityze word';
              }
            }
          
          } else if (item == 'selection_next_content') {
            content = this.selection_next_content

            // サニタイジング対象文字列のチェック
            if (!checkSanityzeWord(content)) {
              this.validation.selection_memo = '半角「＜」「＞」「＆」「‘」は使えません'
              throw 'selection_next_content contain sanityze word';
            }

            // 文字長チェック
            if (!checkLength(content, 100)) {
              this.validation.selection_memo = '100文字以内で入力してください'
              throw 'selection_next_content length over';
            }
            
          } else if (item == 'selection_memo') {
            content = this.selection_memo

            // サニタイジング対象文字列のチェック
            if (!checkSanityzeWord(content)) {
              this.validation.selection_memo = '半角「＜」「＞」「＆」「‘」は使えません'
              throw 'selection_memo contain sanityze word';
            }

            // 文字長チェック
            if (!checkLength(content, 10000)) {
              this.validation.selection_memo = '10,000文字以内で入力してください'
              throw 'selection_memo length over';
            }
          }

          // APIへの更新リクエスト
          fetch(`/api/v1/company`, {
            method: 'put',
            mode: 'same-origin',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              comp_id: comp_id,
              content: content,
              item: item,
            })
          })
          .then(res => {
            return res.json();
          })
          .then(json => {

            console.log(json.result);

            if (json.result == 'error') {
              alert('update error.')
              window.location.reload();
              return;
            }

            alert('update success.')            
            window.location.reload();
            return;
          })
          .catch(err => {
            return;
          });
        }
      },
    });
  </script>
</body>

</html>